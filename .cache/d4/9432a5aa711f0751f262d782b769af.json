{"id":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","dependencies":[{"name":"/Users/admin/Desktop/porfolio-sites/weather/package.json","includedInParent":true,"mtime":1539921251752},{"name":"/Users/admin/Desktop/porfolio-sites/weather/.babelrc","includedInParent":true,"mtime":1539895192787},{"name":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/node-geocoder/package.json","includedInParent":true,"mtime":1539921250401},{"name":"querystring","loc":{"line":2,"column":29},"parent":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","resolved":"/Users/admin/.config/yarn/global/node_modules/querystring-es3/index.js"},{"name":"util","loc":{"line":3,"column":29},"parent":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","resolved":"/Users/admin/.config/yarn/global/node_modules/util/util.js"},{"name":"./abstractgeocoder","loc":{"line":4,"column":29},"parent":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","resolved":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/node-geocoder/lib/geocoder/abstractgeocoder.js"}],"generated":{"js":"var\n  querystring      = require('querystring'),\n  util             = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n *\n * Geocoder for LocationIQ\n * http://locationiq.org/#docs\n *\n * @param {[type]} httpAdapter [description]\n * @param {String} apiKey      [description]\n */\nvar LocationIQGeocoder = function LocationIQGeocoder(httpAdapter, apiKey) {\n\n  LocationIQGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error('LocationIQGeocoder needs an apiKey');\n  }\n\n  this.apiKey = querystring.unescape(apiKey);\n};\n\nutil.inherits(LocationIQGeocoder, AbstractGeocoder);\n\nLocationIQGeocoder.prototype._endpoint = 'http://locationiq.org/v1';\nLocationIQGeocoder.prototype._endpoint_reverse = 'http://osm1.unwiredlabs.com/locationiq/v1/reverse.php';\n\n/**\n * Geocode\n * @param  {string|object}   value\n *   Value to geocode (Adress String or parameters as specified over at\n *   http://locationiq.org/#docs)\n * @param  {Function} callback callback method\n */\nLocationIQGeocoder.prototype._geocode = function(value, callback) {\n  var params = this._getCommonParams();\n\n  if (typeof value === 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n      switch(k) {\n        default:\n          params[k] = v;\n          break;\n        // alias for postalcode\n        case 'zipcode':\n          params.postalcode = v;\n          break;\n        // alias for street\n        case 'address':\n          params.street = v;\n          break;\n      }\n    }\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint + '/search.php', params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n      // add check if the array is not empty, as it returns an empty array from time to time\n      var results = [];\n      if (responseData.length && responseData.length > 0) {\n        results = responseData.map(this._formatResult).filter(function(result) {\n          return result.longitude && result.latitude;\n        });\n        results.raw = responseData;\n      }\n\n      callback(false, results);\n    }.bind(this));\n};\n\n/**\n * Reverse geocoding\n * @param  {lat:<number>,lon<number>}   query    lat: Latitude, lon: Longitutde and additional parameters as specified here: http://locationiq.org/#docs\n * @param  {Function} callback Callback method\n */\nLocationIQGeocoder.prototype._reverse = function(query, callback) {\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n\n      // locationiq always seemes to answer with a single object instead\n      // of an array\n      var results = [responseData].map(this._formatResult).filter(function(result) {\n        return result.longitude && result.latitude;\n      });\n      results.raw = responseData;\n\n      callback(false, results);\n    }.bind(this));\n};\n\nLocationIQGeocoder.prototype._formatResult = function(result) {\n  // transform lat and lon to real floats\n  var transformedResult = {\n    'latitude' : result.lat ? parseFloat(result.lat) : undefined,\n    'longitude' : result.lon ? parseFloat(result.lon) : undefined\n  };\n\n  if (result.address) {\n    transformedResult.country = result.address.country;\n    transformedResult.country = result.address.country;\n    transformedResult.city = result.address.city || result.address.town || result.address.village || result.address.hamlet;\n    transformedResult.state = result.address.state;\n    transformedResult.zipcode = result.address.postcode;\n    transformedResult.streetName = result.address.road || result.address.cycleway;\n    transformedResult.streetNumber = result.address.house_number;\n    // make sure countrycode is always uppercase to keep node-geocoder api formats\n    transformedResult.countryCode = result.address.country_code.toUpperCase();\n  }\n  return transformedResult;\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nLocationIQGeocoder.prototype._getCommonParams = function() {\n  return {\n    'key': this.apiKey\n  };\n};\n\n/**\n * Adds parameters that are enforced\n *\n * @param  {object} params object containing the parameters\n */\nLocationIQGeocoder.prototype._forceParams = function(params) {\n  params.format = 'json';\n  params.addressdetails = '1';\n};\n\n\nmodule.exports = LocationIQGeocoder;\n","map":{"mappings":[{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}}],"sources":{"node_modules/node-geocoder/lib/geocoder/locationiqgeocoder.js":"var\n  querystring      = require('querystring'),\n  util             = require('util'),\n  AbstractGeocoder = require('./abstractgeocoder');\n\n/**\n * Constructor\n *\n * Geocoder for LocationIQ\n * http://locationiq.org/#docs\n *\n * @param {[type]} httpAdapter [description]\n * @param {String} apiKey      [description]\n */\nvar LocationIQGeocoder = function LocationIQGeocoder(httpAdapter, apiKey) {\n\n  LocationIQGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error('LocationIQGeocoder needs an apiKey');\n  }\n\n  this.apiKey = querystring.unescape(apiKey);\n};\n\nutil.inherits(LocationIQGeocoder, AbstractGeocoder);\n\nLocationIQGeocoder.prototype._endpoint = 'http://locationiq.org/v1';\nLocationIQGeocoder.prototype._endpoint_reverse = 'http://osm1.unwiredlabs.com/locationiq/v1/reverse.php';\n\n/**\n * Geocode\n * @param  {string|object}   value\n *   Value to geocode (Adress String or parameters as specified over at\n *   http://locationiq.org/#docs)\n * @param  {Function} callback callback method\n */\nLocationIQGeocoder.prototype._geocode = function(value, callback) {\n  var params = this._getCommonParams();\n\n  if (typeof value === 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n      switch(k) {\n        default:\n          params[k] = v;\n          break;\n        // alias for postalcode\n        case 'zipcode':\n          params.postalcode = v;\n          break;\n        // alias for street\n        case 'address':\n          params.street = v;\n          break;\n      }\n    }\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint + '/search.php', params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n      // add check if the array is not empty, as it returns an empty array from time to time\n      var results = [];\n      if (responseData.length && responseData.length > 0) {\n        results = responseData.map(this._formatResult).filter(function(result) {\n          return result.longitude && result.latitude;\n        });\n        results.raw = responseData;\n      }\n\n      callback(false, results);\n    }.bind(this));\n};\n\n/**\n * Reverse geocoding\n * @param  {lat:<number>,lon<number>}   query    lat: Latitude, lon: Longitutde and additional parameters as specified here: http://locationiq.org/#docs\n * @param  {Function} callback Callback method\n */\nLocationIQGeocoder.prototype._reverse = function(query, callback) {\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params,\n    function(err, responseData) {\n      if (err) {\n        return callback(err);\n      }\n\n      // when there’s no err thrown here the resulting array object always\n      // seemes to be defined but empty so no need to check for\n      // responseData.error for now\n\n      // locationiq always seemes to answer with a single object instead\n      // of an array\n      var results = [responseData].map(this._formatResult).filter(function(result) {\n        return result.longitude && result.latitude;\n      });\n      results.raw = responseData;\n\n      callback(false, results);\n    }.bind(this));\n};\n\nLocationIQGeocoder.prototype._formatResult = function(result) {\n  // transform lat and lon to real floats\n  var transformedResult = {\n    'latitude' : result.lat ? parseFloat(result.lat) : undefined,\n    'longitude' : result.lon ? parseFloat(result.lon) : undefined\n  };\n\n  if (result.address) {\n    transformedResult.country = result.address.country;\n    transformedResult.country = result.address.country;\n    transformedResult.city = result.address.city || result.address.town || result.address.village || result.address.hamlet;\n    transformedResult.state = result.address.state;\n    transformedResult.zipcode = result.address.postcode;\n    transformedResult.streetName = result.address.road || result.address.cycleway;\n    transformedResult.streetNumber = result.address.house_number;\n    // make sure countrycode is always uppercase to keep node-geocoder api formats\n    transformedResult.countryCode = result.address.country_code.toUpperCase();\n  }\n  return transformedResult;\n};\n\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\nLocationIQGeocoder.prototype._getCommonParams = function() {\n  return {\n    'key': this.apiKey\n  };\n};\n\n/**\n * Adds parameters that are enforced\n *\n * @param  {object} params object containing the parameters\n */\nLocationIQGeocoder.prototype._forceParams = function(params) {\n  params.format = 'json';\n  params.addressdetails = '1';\n};\n\n\nmodule.exports = LocationIQGeocoder;\n"},"lineCount":164}},"hash":"7b374c0af3868bedaa16087651b57ab6","cacheData":{"env":{}}}