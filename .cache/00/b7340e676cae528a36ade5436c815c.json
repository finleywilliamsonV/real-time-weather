{"id":"node_modules/encoding/lib/encoding.js","dependencies":[{"name":"/Users/admin/Desktop/porfolio-sites/weather/package.json","includedInParent":true,"mtime":1539972613613},{"name":"/Users/admin/Desktop/porfolio-sites/weather/.babelrc","includedInParent":true,"mtime":1539895192787},{"name":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/encoding/package.json","includedInParent":true,"mtime":1533837667500},{"name":"iconv-lite","loc":{"line":3,"column":24},"parent":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/encoding/lib/encoding.js","resolved":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/iconv-lite/lib/index.js"},{"name":"./iconv-loader","loc":{"line":6,"column":20},"parent":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/encoding/lib/encoding.js","resolved":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/encoding/lib/iconv-loader.js"},{"name":"buffer","parent":"/Users/admin/Desktop/porfolio-sites/weather/node_modules/encoding/lib/encoding.js","resolved":"/Users/admin/.config/yarn/global/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nvar iconvLite = require('iconv-lite');\n// Load Iconv from an external file to be able to disable Iconv for webpack\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\nvar Iconv = require('./iconv-loader');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @param {Boolean} useLite If set to ture, force to use iconvLite\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from, useLite) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n\n    var result;\n\n    if (from !== 'UTF-8' && typeof str === 'string') {\n        str = new Buffer(str, 'binary');\n    }\n\n    if (from === to) {\n        if (typeof str === 'string') {\n            result = new Buffer(str);\n        } else {\n            result = str;\n        }\n    } else if (Iconv && !useLite) {\n        try {\n            result = convertIconv(str, to, from);\n        } catch (E) {\n            console.error(E);\n            try {\n                result = convertIconvLite(str, to, from);\n            } catch (E) {\n                console.error(E);\n                result = str;\n            }\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n\n\n    if (typeof result === 'string') {\n        result = new Buffer(result, 'utf-8');\n    }\n\n    return result;\n}\n\n/**\n * Convert encoding of a string with node-iconv (if available)\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconv(str, to, from) {\n    var response, iconv;\n    iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n    response = iconv.convert(str);\n    return response.slice(0, response.length);\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n        return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n    return (name || '').toString().trim().\n    replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').\n    replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').\n    replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').\n    replace(/^ks_c_5601\\-1987$/i, 'CP949').\n    replace(/^us[\\-_]?ascii$/i, 'ASCII').\n    toUpperCase();\n}\n","map":{"mappings":[{"source":"node_modules/encoding/lib/encoding.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/encoding/lib/encoding.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}}],"sources":{"node_modules/encoding/lib/encoding.js":"'use strict';\n\nvar iconvLite = require('iconv-lite');\n// Load Iconv from an external file to be able to disable Iconv for webpack\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\nvar Iconv = require('./iconv-loader');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @param {Boolean} useLite If set to ture, force to use iconvLite\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from, useLite) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n\n    var result;\n\n    if (from !== 'UTF-8' && typeof str === 'string') {\n        str = new Buffer(str, 'binary');\n    }\n\n    if (from === to) {\n        if (typeof str === 'string') {\n            result = new Buffer(str);\n        } else {\n            result = str;\n        }\n    } else if (Iconv && !useLite) {\n        try {\n            result = convertIconv(str, to, from);\n        } catch (E) {\n            console.error(E);\n            try {\n                result = convertIconvLite(str, to, from);\n            } catch (E) {\n                console.error(E);\n                result = str;\n            }\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n\n\n    if (typeof result === 'string') {\n        result = new Buffer(result, 'utf-8');\n    }\n\n    return result;\n}\n\n/**\n * Convert encoding of a string with node-iconv (if available)\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconv(str, to, from) {\n    var response, iconv;\n    iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n    response = iconv.convert(str);\n    return response.slice(0, response.length);\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n        return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n    return (name || '').toString().trim().\n    replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').\n    replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').\n    replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').\n    replace(/^ks_c_5601\\-1987$/i, 'CP949').\n    replace(/^us[\\-_]?ascii$/i, 'ASCII').\n    toUpperCase();\n}\n"},"lineCount":115}},"hash":"9b0e09fff1b4cb5677870f1a45fd17d2","cacheData":{"env":{}}}